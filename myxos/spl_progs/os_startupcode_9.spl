load(7,1);
load(8,2);

load(23,17);
load(24,18);

[READY_LIST + 0] = 0;

load(25,21);
load(26,22);
load(27,23);

load (11, 5);
load (12, 6);
load (13, 7);
load (14, 8);
load (15, 9);
load (16, 10);
load (17, 11);
load (18, 12);
load (19, 13);
load (20, 14);
load (21, 15);
load (22, 16);
load (23, 17);
load (24, 18);

PTBR = 1024;
PTLR = 4;
[PTBR + 0] = 25;
[PTBR + 1] = "01";
[PTBR + 2] = 26;
[PTBR + 3] = "01";
[PTBR + 4] = 27;
[PTBR + 5] = "01";
[PTBR + 6] = 28;
[PTBR + 7] = "01";
[READY_LIST + 1] = 2; 
SP = 3 * 512;
BP = 3 * 512;

[28 * 512] = 0; 
load (9, 3);
load (10, 4);
load (5,19);
load (6,20);
alias counter S0;			
counter = 0;
while ( counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;

counter = 15;
while ( counter <= 30) do	
[READY_LIST + counter] = -1;
counter = counter + 1;
endwhile;

alias Mem_Free_List	S2;
Mem_Free_List = 1280;
counter = 0;

while (counter <= 28) do
[Mem_Free_List + counter] = 1;
counter = counter +1;
endwhile;


while (counter < 64) do
[Mem_Free_List + counter] = 0;
counter = counter +1;
endwhile;

alias index S4;
counter = 0;
index = 33;

while(counter < 32) do
[READY_LIST + index] = 0;
index = index + 32;
counter = counter + 1;
endwhile;
ireturn;
